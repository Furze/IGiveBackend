// <auto-generated />
using GiveAShitBackend.Database;
using GiveAShitBackend.Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GiveAShitBackend.Migrations
{
    [DbContext(typeof(GASDbContext))]
    [Migration("20170826073024_barcodes")]
    partial class barcodes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GiveAShitBackend.Database.Models.Barcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Guid");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DonatorUserId");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("ReciepientUserId");

                    b.HasKey("Id");

                    b.HasIndex("DonatorUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReciepientUserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<int?>("BarcodeId");

                    b.Property<string>("Brand");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.ProductAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductStatus");

                    b.Property<int?>("TransactionId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductAssignments");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.TransactionProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Assigned");

                    b.Property<int?>("ProductId");

                    b.Property<int?>("UserTransactionId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserTransactionId");

                    b.ToTable("TransactionProducts");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.UserTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Location");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserTransactions");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.Barcode", b =>
                {
                    b.HasOne("GiveAShitBackend.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.Donation", b =>
                {
                    b.HasOne("GiveAShitBackend.Database.Models.User", "DonatorUser")
                        .WithMany()
                        .HasForeignKey("DonatorUserId");

                    b.HasOne("GiveAShitBackend.Database.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("GiveAShitBackend.Database.Models.User", "ReciepientUser")
                        .WithMany()
                        .HasForeignKey("ReciepientUserId");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.Product", b =>
                {
                    b.HasOne("GiveAShitBackend.Database.Models.Barcode")
                        .WithMany("Products")
                        .HasForeignKey("BarcodeId");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.ProductAssignment", b =>
                {
                    b.HasOne("GiveAShitBackend.Database.Models.TransactionProducts", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.HasOne("GiveAShitBackend.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.ProductCategory", b =>
                {
                    b.HasOne("GiveAShitBackend.Database.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("GiveAShitBackend.Database.Models.TransactionProducts", b =>
                {
                    b.HasOne("GiveAShitBackend.Database.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("GiveAShitBackend.Database.Models.UserTransaction", "UserTransaction")
                        .WithMany()
                        .HasForeignKey("UserTransactionId");
                });
#pragma warning restore 612, 618
        }
    }
}
